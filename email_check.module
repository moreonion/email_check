<?php

/**
 * @file
 * Hook implementations for the email_check module.
 */

/**
 * Implements hook_mail_alter().
 *
 * Mails with the 'X-Mail-Domain' header set won't be altered.
 *
 * The Return-Path will be set either way.
 *
 * For mails where all addresses in the "From" field are using the
 * site mail domain, the "From" field won't be changed. If the
 * "Reply-To" field isn't set, the site "Reply-To" address will be
 * set in the "Reply-To" field.
 *
 * Mails where the domain of the address in the "From" field
 * doesn't match the site mail domain will be changed: The original
 * "From"-address will be put into a "Reply-To" header and the site mail
 * address will be used as the "From"-address.
 */
function email_check_mail_alter(&$message) {
  // If X-Mail-Domain is set -> let the mail server do the "From" address
  // mangling.
  if (empty($message['headers']['X-Mail-Domain'])) {
    $site_mail_domain = variable_get('site_mail_domain', NULL);
    $site_mail_address = variable_get('site_mail', NULL);
    $site_reply_to = variable_get('site_replyto_mail', variable_get('site_mail'));
    $site_return_path = variable_get('site_mail_return_path', variable_get('site_mail'));

    $site_mail_domain = empty($site_mail_domain) ? 'campaignion.org' : $site_mail_domain;
    $site_mail_address = empty($site_mail_address) ? 'info@campaignion.org' : $site_mail_address;

    $reply_to = !empty($message['headers']['Reply-To']) ? $message['headers']['Reply-To'] : '';

    // Make sure site_mail and site_mail_domain are consistent.
    if (strpos($site_mail_address, '@' . $site_mail_domain) === FALSE) {
      watchdog('email_check', 'The site mail "%site" does not match the mail domain "%domain". Rewrote to "%info".', [
        '%site' => $site_mail_address,
        '%domain' => $site_mail_domain,
        '%info' => 'info@' . $site_mail_domain,
      ], WATCHDOG_ERROR);
      $site_mail_address = 'info@' . $site_mail_domain;
    }

    // Deal with multiple header From addresses.
    //
    // Theoretically there could be more than 1 From address, e.g. if it was
    // set in the webform admin settings.
    //
    // We have the notion of the primary From address, i.e. the first address.
    // Only for this primary (first) From address we can enforce a DMARC
    // compliant email.
    $message_from_addresses = _email_check_match_email_addresses($message['from']);
    // When no address is found, no need to try sending the email.
    //
    // If an address is found, just deal with the first one to determine if
    // we need to set an Reply-To header.
    if (count($message_from_addresses) === 0) {
      watchdog('email_check', 'No mail address found in string "%from".', array('%from' => $message['from']), WATCHDOG_WARNING);
      $message['send'] = FALSE;
      return;
    }
    else {
      // Get the first element, i.e. the primary address.
      reset($message_from_addresses);
      $index = key($message_from_addresses);
      $address = $message_from_addresses[$index];
      // Set a Reply-To if necessary.
      //
      // If the domain from the "From" address is not the site mail domain
      // we know we need to set a reply-to. So save the found address as
      // reply-to and use the site mail as From address (which we assume to be
      // valid).
      //
      // Only set the address as reply-to if reply-to is not set already.
      if (strpos($address, '@' . $site_mail_domain) === FALSE) {
        $message_from_addresses[$index] = $site_mail_address;
        if (!$reply_to) {
          $reply_to = $address;
        }
        else {
          watchdog('email_check', 'Reply-To already set to "%replyto". Not setting "%from" as Reply-To.', array('%replyto' => $reply_to, '%from' => $address), WATCHDOG_NOTICE);
        }
      }
    }
    $message['from'] = $message['headers']['From'] = implode(',', $message_from_addresses);

    // Additionally set a site reply-to.
    //
    // Only set reply-to to the site reply-to if we need to.
    // We only need to actually set the reply-to when 2 conditions are met:
    //
    // 1. the from address is the site mail address (variable site_mail), and
    // 2. a site replyto address is set (variable site_replyto_mail)
    //
    // The other cases are fine, e.g. if a custom@mail.domain.com address was
    // set as From address, we want to preserve it. Replys should go to this
    // address.
    if (!$reply_to && $site_reply_to && strpos($message['from'], $site_mail_address) !== FALSE) {
      $reply_to = $site_reply_to;
    }

    // If the replyto is set, use it.
    //
    // No need to check the domain of the reply to address, everything is
    // allowed here.
    if ($reply_to) {
      $message['headers']['Reply-To'] = $reply_to;
    }
  }

  // By default Drupal uses the messages 'From' address as Return-Path.
  // We want to be able to specify a specific Return-Path. The header will be
  // extracted by the mail engine and passed to the sendmail command as `-f`
  // parameter.
  if (empty($message['headers']['Return-Path']) || strpos($message['headers']['Return-Path'], '@' . $site_mail_domain) === FALSE) {
    // Set a default Return-Path if none is set or it is invalid.
    $message['headers']['Return-Path'] = $site_return_path;
  }
  if (strpos($message['headers']['Return-Path'], '@' . $site_mail_domain) === FALSE) {
    // If the Return-Path is still invalid remove it.
    unset($message['headers']['Return-Path']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for system_site_information_settings().
 *
 * Add a system settings entry to configure an email Reply-To value.
 */
function email_check_form_system_site_information_settings_alter(&$form, &$form_state) {
  $form['site_information']['site_replyto_mail'] = array(
    '#type'          => 'textfield',
    '#title'         => t('ReplyTo E-mail address'),
    '#default_value' => variable_get('site_replyto_mail', variable_get('site_mail', 'admin@localhost')),
    '#description'   => t('The <em>Reply-To</em> address set for all outgoing e-mails. When the site mail address is "info@sub.example.net", but you want replies to be sent to "office@example.net", set the latter as the <em>ReplyTo</em> address.'),
    '#required'      => FALSE,
  );
}

/**
 * Returns an array with all valid mailboxes from a string.
 *
 * @param string $string
 *   String to search for mailbox substrings.
 *
 * @return string[]
 *   Array of mailbox strings found in the input string.
 */
function _email_check_match_email_addresses($string) {
  // This pattern should match a mailbox specification (RFC 5322)
  $pattern = '/(["][^"]+["])?[[:blank:]]*[<]?[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b[>]?/i';
  preg_match_all($pattern, $string, $matches);

  // $matches[0] contains the strings matching the whole pattern.
  $addresses = $matches[0];
  return array_unique(array_map('trim', $addresses));
}
